<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		                http://www.springframework.org/schema/context
		                http://www.springframework.org/schema/context/spring-context-3.0.xsd
		                http://www.springframework.org/schema/mvc
		                http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
                        http://www.springframework.org/schema/util
                        http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="com.homerenting.mvc"/>
    <context:component-scan base-package="com.homerenting.interceptors"/>
    <context:component-scan base-package="com.homerenting.validators"/>
    <context:component-scan base-package="com.homerenting.converters"/>
    <context:component-scan base-package="com.homerenting.external"/>

    <util:properties id="cloudinaryProperties" location="classpath:cloudinary.properties" />

    <!-- freemarker config -->
    <bean id="freemarkerConfig"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/views/"/>
    </bean>

    <!-- View resolvers can also be configured with ResourceBundles or XML files.
        If you need different view resolving based on Locale, you have to use the
        resource bundle resolver. -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="cache" value="true"/>
        <property name="prefix" value=""/>
        <property name="suffix" value=".ftl"/>
        <property name="exposeSessionAttributes">
            <value>true</value>
        </property>
    </bean>

    <mvc:resources mapping="/static/**" location="/"/>

    <mvc:default-servlet-handler/>

    <!-- Access resource bundles with the specified basename -->
    <!-- Using ReloadableResourceBundleMessageSource so changes can be seen
         immediately during development. Note that it parses "basenames"
         differently, see Javadoc for the class. -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>/WEB-INF/i18n/messages</value>
                <value>/WEB-INF/i18n/modules/header/header</value>
                <value>/WEB-INF/i18n/modules/header/login/login</value>
                <value>/WEB-INF/i18n/modules/header/navigation/navigation</value>
                <value>/WEB-INF/i18n/modules/footer/footer</value>
                <value>/WEB-INF/i18n/modules/latestProperties/latest-properties</value>
                <value>/WEB-INF/i18n/modules/search/search</value>
            </list>
        </property>
        <property name="cacheSeconds" value="0"/>
        <property name="fileEncodings" value="UTF-8"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <property name="paramName" value="siteLanguage"/>
        </bean>
    </mvc:interceptors>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieMaxAge" value="100000"/>
    </bean>

    <!-- Data Validation beans-->
    <bean id="loginFormValidator" class="com.homerenting.validators.LoginFormValidator"/>
    <bean id="contactFormValidator" class="com.homerenting.validators.ContactFormValidator"/>
    <bean id="registerFormValidator" class="com.homerenting.validators.RegisterFormValidator"/>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com"/>
        <property name="port" value="587"/>
        <property name="username" value="arthurportas@gmail.com"/>
        <property name="password" value="xKoninha"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
            </props>
        </property>
    </bean>

    <bean id="cloudinaryConfigMap" class="java.util.HashMap">
        <constructor-arg>
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="api_key" value="681112152891473" />
                <entry key="api_secret" value="c0KWZ6xfEd736Fub0D-aJghi_tY" />
                <entry key="cloud_name" value="homerenting" />
                <entry key="callback" value="/static/resources/realto-html/js/modules/announces/html/cloudinary_cors.html" />
            </map>
        </constructor-arg>
    </bean>

    <bean id="cloudinary" class="com.cloudinary.Cloudinary">
        <constructor-arg index="0" ref="cloudinaryConfigMap" />
    </bean>

    <bean id="cloudinarySingleton" class="com.homerenting.external.CloudinaryManager"
          init-method="init" destroy-method="destroy">
        <property name="cloudinary" ref="cloudinary" />
    </bean>
    <!-- JSR-303
    <bean id="validator"
        class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource" />
    </bean>-->
    <mvc:annotation-driven/>
</beans>